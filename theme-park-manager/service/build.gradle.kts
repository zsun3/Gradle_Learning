import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.10/samples
 */
plugins {
    id("com.gradlehero.themepark-conventions")
    application
    base
    kotlin("jvm")
    `java-library`
    `maven-publish`
}

group = "com.gradlehero"
version = "1.0-SNAPSHOT"

application {
    mainClass.set("com.gradlehero.themepark.RideStatusService")
    // Defines the main class to be executed
}

dependencies {
    implementation("org.apache.commons:commons-lang3:3.12.0")
    api("com.fasterxml.jackson.core:jackson-databind:2.13.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.0")
//    testImplementation("junit:junit:4.13.2")
//    testImplementation("org.testng:testng:7.4.0")
}

tasks.named<Jar>("jar") {
    manifest {
        attributes["Main-Class"] = "com.gradlehero.themepark.RideStatusService"
    }

    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    }) // This is required or else jar execution will throw no class def found error
}

tasks.named<Test>("test") {
    useJUnitPlatform()
    exclude("com/gradlehero/themepark")
//    useTestNG()
}

tasks.withType<KotlinCompile> {
    println("path: ${abiSnapshotRelativePath.get()}")
}

tasks.withType<Test>().configureEach {
    maxHeapSize = "1024m"
}

tasks.named<Copy>("processResources") {
    include("**/*.txt")
}

tasks.named<Jar>("jar") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("example.jar")
}

tasks.register<JavaExec>("runJar") {
    classpath(tasks.named("jar").map { it.outputs })
    // grabbing the jar artifact and run directly
    classpath(configurations.runtimeClasspath)
    args(" teacups")
    mainClass.set("com.gradlehero.themepark.RideStatusService")
    // Have to set when using multiple jars
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
        // Force java compiling version
    }
}
